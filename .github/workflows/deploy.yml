name: MOKI-CAMPAIGN CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'  # <<< backend 폴더 하위의 파일이 변경될 때만 실행
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'  # <<< backend 폴더 하위의 파일이 변경될 때만 실행

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x gradlew

      - name: Build with Gradle (includes test)
        working-directory: ./backend
        run: ./gradlew build

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t knu-connect-be:${{ github.sha }} .
          docker save knu-connect-be:${{ github.sha }} > ../app.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: app.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USERNAME }}
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Docker 이미지 전송
          scp -i private_key.pem -o StrictHostKeyChecking=no app.tar ${USER}@${HOST}:/home/${USER}/

          # 배포 스크립트 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} "
            set -e

            echo '=== Docker 이미지 로드 시작 ==='
            docker load < /home/${USER}/app.tar
            echo '✅ Docker 이미지 로드 완료'

            echo '=== 기존 컨테이너 정리 ==='
            docker stop knu-connect-be 2>/dev/null || echo '기존 컨테이너 없음'
            docker rm knu-connect-be 2>/dev/null || echo '삭제할 컨테이너 없음'

            echo '=== 새로운 컨테이너 실행 ==='
            docker run -d \
              --name knu-connect-be \
              --restart unless-stopped \
              -p 8080:8080 \
              -e DB_HOST=${DB_HOST} \
              -e DB_PORT=${DB_PORT} \
              -e DB_NAME=${DB_NAME} \
              -e DB_USERNAME=${DB_USERNAME} \
              -e DB_PASSWORD=${DB_PASSWORD} \
              knu-connect-be:${IMAGE_TAG}
            
            echo '✅ 컨테이너 시작됨 (ID: $(docker ps -q -f name=knu-connect-be))'

            echo '=== 컨테이너 로그 (최근 20줄) ==='
            sleep 5
            docker logs knu-connect-be --tail 20

            echo '=== 헬스체크 시작 (최대 60초 대기) ==='
            for i in {1..30}; do
              if ! docker ps | grep -q knu-connect-be; then
                echo '❌ 컨테이너가 중지되었습니다!'
                docker logs knu-connect-be --tail 100
                exit 1
              fi
              
              if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo '✅ 헬스체크 성공! 애플리케이션이 정상 작동 중입니다.'
                
                rm /home/${USER}/app.tar
                docker image prune -f > /dev/null 2>&1
                
                echo '=== 배포 완료 ==='
                docker ps | grep knu-connect-be
                exit 0
              fi
              
              echo '⏳ Attempt $i/30: 애플리케이션 시작 중...'
              sleep 2
            done

            echo '❌ 헬스체크 실패 - 애플리케이션이 60초 내에 시작하지 못했습니다.'
            echo '=== 전체 로그 출력 ==='
            docker logs knu-connect-be
            exit 1
          "
          rm private_key.pem
